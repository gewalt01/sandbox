using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using drbm_c_sharp;

namespace SazaeJanken
{
    class Program
    {
        static void Main(string[] args)
        {
            UnityJanken janken = new UnityJanken(15);
            List<int> train_data = (new int[] { 0, 1, 2, 1, 0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 1, 1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 2, 1, 0, 1, 2, 0, 0, 2, 2, 0, 1, 2, 0, 1, 0, 2, 2, 1, 1, 0, 2, 1, 0, 1, 1, 2, 0, 2, 2, 1, 0, 2, 0, 1, 0, 2, 2, 0, 1, 0, 1, 0, 2, 0, 0, 1, 2, 1, 2, 2, 0, 1, 0, 1, 1, 2, 2, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 0, 0, 2, 1, 1, 2, 0, 2, 1, 0, 0, 2, 0, 1, 0, 1, 2, 2, 1, 0, 0, 2, 2, 1, 1, 2, 0, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 0, 2, 1, 0, 0, 2, 2, 1, 0, 1, 2, 1, 0, 2, 0, 2, 1, 0, 2, 0, 1, 1, 2, 1, 0, 2, 2, 1, 0, 2, 1, 0, 1, 2, 2, 1, 0, 0, 1, 2, 1, 0, 2, 2, 0, 1, 1, 0, 2, 1, 2, 2, 0, 1, 1, 2, 0, 0, 2, 1, 2, 0, 1, 1, 0, 2, 1, 2, 1, 0, 0, 2, 1, 2, 2, 0, 1, 1, 0, 2, 0, 1, 2, 2, 1, 0, 0, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 0, 2, 2, 1, 1, 0, 2, 0, 0, 1, 2, 1, 0, 0, 2, 1, 2, 2, 0, 0, 1, 1, 0, 2, 1, 2, 0, 2, 1, 0, 1, 0, 2, 2, 1, 0, 1, 2, 2, 0, 1, 2, 1, 0, 0, 2, 1, 1, 0, 2, 0, 1, 0, 2, 2, 1, 0, 1, 2, 1, 1, 0, 2, 1, 0, 1, 2, 0, 0, 2, 1, 2, 1, 0, 2, 2, 0, 1, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 2, 0, 0, 1, 2, 1, 0, 2, 1, 2, 1, 0, 0, 2, 1, 2, 0, 1, 2, 2, 1, 1, 0, 2, 1, 2, 0, 0, 1, 2, 1, 2, 0, 2, 1, 1, 0, 2, 0, 1, 2, 1, 0, 0, 2, 1, 0, 1, 0, 0, 2, 2, 1, 0, 2, 0, 1, 0, 2, 2, 2, 1, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 0, 1, 0, 0, 1, 1, 2, 0, 0, 1, 2, 2, 0, 1, 2, 0, 1, 1, 0, 1, 2, 0, 1, 0, 0, 1, 2, 0, 1, 1, 1, 2, 2, 1, 1, 2, 0, 2, 0, 1, 1, 2, 2, 0, 0, 2, 1, 1, 2, 1, 2, 0, 2, 1, 1, 2, 1, 2, 0, 0, 1, 1, 1, 0, 1, 2, 1, 0, 1, 2, 0, 0, 2, 1, 2, 0, 2, 0, 0, 1, 1, 2, 0, 2, 1, 2, 1, 0, 0, 2, 1, 2, 2, 1, 1, 0, 1, 2, 1, 0, 0, 2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 1, 2, 0, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1, 2, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 2, 1, 0, 0, 2, 0, 1, 0, 0, 1, 1, 2, 0, 0, 1, 2, 0, 1, 2, 2, 0, 1, 1, 2, 0, 2, 1, 2, 1, 0, 2, 1, 1, 0, 1, 1, 2, 2, 0, 0, 0, 1, 2, 1, 2, 2, 0, 1, 0, 2, 2, 1, 2, 2, 2, 1, 0, 0, 0, 2, 1, 0, 2, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 1, 0, 0, 2, 2, 1, 2, 1, 1, 0, 2, 0, 1, 2, 0, 0, 1, 2, 0, 2, 1, 2, 2, 1, 0, 2, 0, 0, 1, 2, 0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 2, 1, 0, 1, 2, 2, 1, 2, 0, 0, 2, 1, 2, 1, 1, 0, 2, 0, 1, 1, 0, 2, 2, 2, 0, 1, 0, 1, 0, 2, 1, 1, 2, 1, 1, 0, 0, 1, 2, 1, 0, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1, 2, 1, 1, 0, 2, 1, 2, 0, 0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 2, 1, 0, 1, 2, 2, 0, 1, 0, 1, 2, 1, 1, 2, 0, 2, 1, 2, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1, 0, 1, 2, 1, 1, 0, 0, 1, 0, 2, 2, 1, 0, 0, 2, 2, 0, 1, 1, 0, 2, 0, 0, 1, 1, 2, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 1, 2, 1, 2, 0, 2, 1, 1, 0, 0, 1, 2, 1, 0, 2, 1, 2, 1, 0, 2, 1, 2, 0, 0, 2, 1, 1, 0, 2, 1, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 1, 0, 2, 1, 0, 1, 2, 0, 1, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2, 0, 1, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 0, 1, 2, 0, 2, 2, 1, 0, 1, 2, 0, 0, 1, 2, 1, 2, 0, 1, 2, 0, 2, 2, 1, 0, 1, 2, 0, 1, 1, 2, 0, 1, 1, 2, 2, 0, 0, 1, 2, 1, 0, 2, 1, 0, 2, 2, 0, 1, 1, 2, 0, 0, 1, 2, 1, 2, 0, 2, 0, 1, 0, 1, 2, 1, 0, 2, 1, 2, 1, 0, 2, 1, 0, 0, 2, 1, 2, 2, 0, 1, 1, 2, 0, 0, 1, 2, 2, 1, 0, 2, 2, 0, 1, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 0, 1, 0, 2, 1, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 2, 2, 1, 0, 0, 1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 0, 0, 2, 1, 2, 1, 0, 1, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 2, 1, 0, 0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2, 1, 0, 1, 2, 2, 1, 0, 0, 2, 1, 1, 2, 0, 1, 2, 2, 1, 1, 0, 2, 0, 1, 2, 1, 0, 0, 2, 1, 2, 0, 1, 0, 0, 2, 1, 2, 0, 2, 1, 2, 0, 1, 2, 1, 0, 1, 1, 2, 0, 2, 1, 2, 0, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 1, 0, 1, 2, 0, 1, 1, 0, 2, 2, 1, 0, 1, 2, 0, 1, 0, 1, 2, 0, 0, 1, 2, 0, 2, 1, 0, 1, 2 }).ToList();
            List<int> test_data = (new int[] { 2, 1, 0, 1, 1, 2, 0, 0, 2, 1, 0, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 0, 1, 0, 2, 1, 1, 0, 2, 2, 0, 1, 2, 0, 0, 1, 1, 2, 2, 0, 2, 1, 0, 2, 0, 1, 1, 2, 1, 0, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 1, 2, 1, 0, 0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 2, 1, 1, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 1, 0, 1, 2, 0, 0 }).ToList();

            /*
            // Train Phase
            foreach (var data in train_data)
            {
                janken.game(data);
            }

            // Inference Phase
            foreach (var data in test_data)
            {
                janken.game(data);
            }

            int count = 0;
            int lose_count = 0;
            // Train Phase
            foreach (var data in train_data)
            {
                int enemy_no = janken.inference();
                bool is_lose = enemy_no == janken.getWinPattern(data);
                string message = is_lose ? "You Lose" : "Draw or Win";
                Console.WriteLine(message);
                count++;
                lose_count += is_lose ? 1 : 0;
                Console.WriteLine("lose rate: " + (double)lose_count / (double)count);
                janken.game(data);
            }

            // Inference Phase
            foreach (var data in test_data)
            {
                int enemy_no = janken.inference();
                bool is_lose = enemy_no == janken.getWinPattern(data);
                string message = is_lose ? "You Lose" : "Draw or Win";
                Console.WriteLine(message);
                count++;
                lose_count += is_lose ? 1 : 0;
                Console.WriteLine("lose rate: " + (double)lose_count / (double)count);
                janken.game(data);
            }
            */
        }
    }
}
